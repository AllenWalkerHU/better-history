// Generated by CoffeeScript 1.3.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  BH.Collections.Intervals = (function(_super) {

    __extends(Intervals, _super);

    Intervals.name = 'Intervals';

    function Intervals() {
      return Intervals.__super__.constructor.apply(this, arguments);
    }

    Intervals.prototype.model = BH.Models.Interval;

    Intervals.prototype.toTemplate = function() {
      var intervals;
      intervals = [];
      this.each(function(model) {
        return intervals.push(model.toTemplate());
      });
      return {
        intervals: intervals,
        noIntervals: this.noIntervals(),
        hasIntervals: this.hasIntervals()
      };
    };

    Intervals.prototype.destroyAll = function() {
      var _results;
      _results = [];
      while (this.length > 0) {
        if (this.at(0)) {
          _results.push(this.at(0).destroy());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Intervals.prototype.noIntervals = function() {
      if (this.models.length === 0) {
        return true;
      } else {
        return false;
      }
    };

    Intervals.prototype.hasIntervals = function() {
      return !this.noIntervals();
    };

    Intervals.prototype.findVisitById = function(id) {
      var interval;
      interval = _.find(this.models, function(model) {
        return model.get('pageVisits').get(id);
      });
      return interval.get('pageVisits').get(id);
    };

    return Intervals;

  })(Backbone.Collection);

}).call(this);
