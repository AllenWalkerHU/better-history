// Generated by CoffeeScript 1.3.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  BH.Models.Settings = (function(_super) {

    __extends(Settings, _super);

    Settings.name = 'Settings';

    function Settings() {
      return Settings.__super__.constructor.apply(this, arguments);
    }

    Settings.prototype.storeName = 'settings';

    Settings.prototype.defaults = function() {
      return {
        timeGrouping: 15,
        domainGrouping: true,
        timeFormat: parseInt(chrome.i18n.getMessage('default_time_format'), 10),
        searchByDomain: true,
        searchBySelection: true
      };
    };

    Settings.prototype.toTemplate = function() {
      return _.extend({
        timeGrouping: [
          {
            text: chrome.i18n.getMessage('15_minutes_option'),
            value: 15,
            selected: this._timeGroupingSelectedCheck(15)
          }, {
            text: chrome.i18n.getMessage('30_minutes_option'),
            value: 30,
            selected: this._timeGroupingSelectedCheck(30)
          }, {
            text: chrome.i18n.getMessage('60_minutes_option'),
            value: 60,
            selected: this._timeGroupingSelectedCheck(60)
          }
        ],
        timeFormats: [
          {
            text: chrome.i18n.getMessage('12_hours_option'),
            value: 12,
            selected: this._timeFormatSelectedCheck(12)
          }, {
            text: chrome.i18n.getMessage('24_hours_option'),
            value: 24,
            selected: this._timeFormatSelectedCheck(24)
          }
        ],
        searchBySelection: this.get('searchBySelection'),
        searchByDomain: this.get('searchByDomain'),
        domainGrouping: this.get('domainGrouping'),
        version: version.get('version')
      }, i18n.settings());
    };

    Settings.prototype.timeGrouping = function() {
      return parseInt(this.get('timeGrouping'), 10);
    };

    Settings.prototype.timeFormat = function() {
      return parseInt(this.get('timeFormat'), 10);
    };

    Settings.prototype.parse = function(data) {
      return this.set(JSON.parse(data));
    };

    Settings.prototype._timeGroupingSelectedCheck = function(value) {
      if (value === this.get('timeGrouping')) {
        return true;
      } else {
        return false;
      }
    };

    Settings.prototype._timeFormatSelectedCheck = function(value) {
      if (value === this.get('timeFormat')) {
        return true;
      } else {
        return false;
      }
    };

    return Settings;

  })(Backbone.Model);

}).call(this);
