// Generated by CoffeeScript 1.3.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  BH.Models.Week = (function(_super) {

    __extends(Week, _super);

    Week.name = 'Week';

    function Week() {
      return Week.__super__.constructor.apply(this, arguments);
    }

    Week.prototype.format = {
      shortTitle: chrome.i18n.getMessage('short_date'),
      title: chrome.i18n.getMessage('date_week_label', [chrome.i18n.getMessage('short_date_with_day')]),
      id: 'D-M-YY'
    };

    Week.prototype.initialize = function() {
      var id;
      id = this._weekFormat('id');
      return this.set({
        shortTitle: this._weekFormat('shortTitle'),
        title: this._weekFormat('title'),
        id: id,
        url: BH.Lib.Url.week(id),
        days: new BH.Collections.Days([
          {
            date: this._generateDate(0),
            weekId: id
          }, {
            date: this._generateDate(1),
            weekId: id
          }, {
            date: this._generateDate(2),
            weekId: id
          }, {
            date: this._generateDate(3),
            weekId: id
          }, {
            date: this._generateDate(4),
            weekId: id
          }, {
            date: this._generateDate(5),
            weekId: id
          }, {
            date: this._generateDate(6),
            weekId: id
          }
        ])
      });
    };

    Week.prototype.toTemplate = function() {
      return _.extend(this.toJSON(), this.get('days').toTemplate());
    };

    Week.prototype.clear = function() {
      return this.get('days').clear();
    };

    Week.prototype.sync = function(method, model, options) {
      var callCount, success;
      if (method === 'read') {
        callCount = 0;
        success = function() {
          if (callCount === 6) {
            return options.success();
          } else {
            return callCount++;
          }
        };
        return this.get('days').each(function(model) {
          return model.fetch({
            success: success
          });
        });
      }
    };

    Week.prototype.parse = function() {
      var count, largest, percentages, visits;
      percentages = [];
      count = 0;
      visits = this.get('days').map(function(model) {
        count += model.get('count');
        return model.get('count');
      });
      largest = Math.max.apply(Math, visits) || 0;
      this.get('days').each(function(model) {
        if (largest === 0) {
          return percentages.push(0);
        } else {
          return percentages.push(model.get('count') / largest * 100);
        }
      });
      return {
        percentages: percentages,
        count: count
      };
    };

    Week.prototype._weekFormat = function(type) {
      return this.get('date').format(this.format[type]);
    };

    Week.prototype._generateDate = function(amount) {
      return moment(this.get('date')).add('days', amount);
    };

    return Week;

  })(Backbone.Model);

}).call(this);
