// Generated by CoffeeScript 1.3.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  BH.Views.TimeVisitView = (function(_super) {

    __extends(TimeVisitView, _super);

    TimeVisitView.name = 'TimeVisitView';

    function TimeVisitView() {
      return TimeVisitView.__super__.constructor.apply(this, arguments);
    }

    TimeVisitView.prototype.className = 'time_visit_view';

    TimeVisitView.prototype.templateId = 'timeVisit';

    TimeVisitView.prototype.collapsedClass = 'collapsed';

    TimeVisitView.prototype.events = {
      'click .delete_interval': 'deleteTimeVisit'
    };

    TimeVisitView.prototype.initialize = function() {
      this.model.fetch();
      return this.collection.on('destroy', this.updateCount, this);
    };

    TimeVisitView.prototype.render = function() {
      var groupedVisits;
      this.$el.html(this.template(this.model.toTemplate()));
      groupedVisits;

      if (app.options.settings.get('domainGrouping')) {
        groupedVisits = GroupBy.domain(this.collection);
      }
      $.each(groupedVisits || this.collection.models, function(i, pageVisit) {
        var view;
        if (pageVisit.length !== void 0) {
          view = new BH.Views.GroupedVisitsView({
            collection: pageVisit
          });
        } else {
          view = new BH.Views.PageVisitView({
            model: pageVisit
          });
        }
        return $('.visits', self.$el).append(view.render().$el);
      });
      return this;
    };

    TimeVisitView.prototype.updateCount = function() {
      if (this.collection.length >= 1) {
        $('.summary', this.el).html(chrome.i18n.getMessage('number_of_visits', [this.collection.length.toString(), '<span class="amount">', '</a>']));
        return $('.summary', this.el).css({
          color: '#000'
        }).animate({
          color: '#999'
        }, 'slow');
      } else {
        return this._remove();
      }
    };

    TimeVisitView.prototype.deleteTimeVisit = function(ev) {
      this.collection.destroyAll();
      return this._remove();
    };

    TimeVisitView.prototype._remove = function() {
      return this.$el.slideUp('fast', function() {
        return this.remove();
      });
    };

    return TimeVisitView;

  })(Backbone.View);

}).call(this);
