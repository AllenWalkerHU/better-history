// Generated by CoffeeScript 1.3.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  BH.Views.SearchView = (function(_super) {

    __extends(SearchView, _super);

    SearchView.name = 'SearchView';

    function SearchView() {
      return SearchView.__super__.constructor.apply(this, arguments);
    }

    SearchView.prototype.className = 'search_view';

    SearchView.prototype.templateId = 'search';

    SearchView.prototype.events = {
      'click .delete_all': 'clickedDeleteAll'
    };

    SearchView.prototype.initialize = function() {
      this.model.on('change:title', this.refreshTitle, this);
      this.model.on('change:history', this.renderVisits, this);
      this.model.on('change:query', this.refreshTitle, this);
      return this.applySearchBehavior();
    };

    SearchView.prototype.render = function() {
      this.$el.append(this.template(_.extend(i18n.search(), this.model.toTemplate())));
      return this;
    };

    SearchView.prototype.refreshTitle = function() {
      this.$('.title').text(this.model.get('title'));
      this.$('.content').html('');
      return this.model.fetch();
    };

    SearchView.prototype.renderVisits = function() {
      var contentElement;
      this.collection = this.model.get('history');
      this.$('.search').focus();
      contentElement = this.$el.children('.content');
      this.$('.number_of_results').text(chrome.i18n.getMessage('number_of_search_results', [this.collection.length]));
      new BH.Views.SearchResultsView({
        collection: this.collection,
        el: contentElement
      }).render();
      if (this.collection.length === 0) {
        this.$('.delete_all').attr('disabled', 'disabled');
      } else {
        this.$('.delete_all').attr('disabled', null);
      }
      return Helpers.tabIndex($(contentElement).find('a'));
    };

    SearchView.prototype.clickedDeleteAll = function(ev) {
      ev.preventDefault();
      if ($(ev.target).parent().attr('disabled') !== 'disabled') {
        this.promptView = BH.Views.CreatePrompt(chrome.i18n.getMessage('confirm_delete_all_search_results'));
        this.promptView.open();
        return this.promptView.model.on('change', this.deleteAction, this);
      }
    };

    SearchView.prototype.deleteAction = function(prompt) {
      var _this = this;
      if (prompt.get('action')) {
        this.promptView.spin();
        this.collection.destroyAll();
        return this.model.fetch({
          success: function(model) {
            model.trigger('change:history');
            return _this.promptView.close();
          }
        });
      } else {
        return this.promptView.close();
      }
    };

    return SearchView;

  })(Backbone.ViewWithSearch);

}).call(this);
