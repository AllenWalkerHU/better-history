// Generated by CoffeeScript 1.3.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  BH.Views.AppView = (function(_super) {

    __extends(AppView, _super);

    AppView.name = 'AppView';

    function AppView() {
      return AppView.__super__.constructor.apply(this, arguments);
    }

    AppView.prototype.className = 'app_view';

    AppView.prototype.templateId = 'app';

    AppView.prototype["class"] = {
      selected: 'selected'
    };

    AppView.prototype.events = {
      'click .navbar a': 'weekClicked'
    };

    AppView.prototype.initialize = function(config, options) {
      this.options = options;
      return this.views = {
        weeks: this._initWeekViews(),
        search: this._initSearchView(),
        settings: this._initSettingsView()
      };
    };

    AppView.prototype.render = function() {
      var container, properties,
        _this = this;
      if (!this.model.get('suppress')) {
        this._renderVersionView();
      }
      properties = _.extend(i18n.app(), this.collection.toTemplate());
      this.$el.html(this.template(properties));
      container = this.$('.mainview');
      _.each(this.views.weeks, function(weekView) {
        return container.append(weekView.render().el);
      });
      container.append(this.views.search.render().el);
      container.append(this.views.settings.render().el);
      return this;
    };

    AppView.prototype.weekClicked = function(ev) {
      this.$('.navbar a').removeClass(this["class"].selected);
      return this.$(ev.currentTarget).addClass(this["class"].selected);
    };

    AppView.prototype.weekSelected = function(id) {
      return this.$("[data-id=" + id + "] a").addClass(this["class"].selected);
    };

    AppView.prototype._initWeekViews = function() {
      var views,
        _this = this;
      views = {};
      this.collection.map(function(model) {
        return views[model.id] = new BH.Views.WeekView({
          model: model
        }, _this.options);
      });
      return views;
    };

    AppView.prototype._initSearchView = function() {
      return new BH.Views.SearchView({
        model: new BH.Models.Search()
      });
    };

    AppView.prototype._initSettingsView = function() {
      return new BH.Views.SettingsView({
        model: settings
      });
    };

    AppView.prototype._renderVersionView = function() {
      var versionView;
      versionView = new BH.Views.VersionView({
        model: this.model
      });
      $('body').append(versionView.render().el);
      return versionView.open();
    };

    return AppView;

  })(BH.Views.BaseView);

}).call(this);
