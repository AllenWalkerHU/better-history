// Generated by CoffeeScript 1.3.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  BH.Views.DayView = (function(_super) {

    __extends(DayView, _super);

    DayView.name = 'DayView';

    function DayView() {
      return DayView.__super__.constructor.apply(this, arguments);
    }

    DayView.prototype.className = 'day_view';

    DayView.prototype.templateId = 'day';

    DayView.prototype.events = {
      'click .delete_all': 'clickedDeleteAll',
      'keyup .search': 'filtered',
      'click .full_search': 'fullSearchClicked'
    };

    DayView.prototype.initialize = function(config) {
      this.attachGeneralEvents();
      return this.model.on('change', this.renderHistory, this);
    };

    DayView.prototype.render = function(type) {
      this.$el.html(this.template(_.extend(i18n.day(), this.model.toTemplate())));
      this.$('button').attr('disabled', 'disabled');
      return this;
    };

    DayView.prototype.renderHistory = function() {
      var contentElement;
      this.collection = this.model.get('history');
      this.$('.search').focus();
      contentElement = this.$('.content');
      new BH.Views.DayResultsView({
        collection: this.model.get('history'),
        model: this.model,
        el: contentElement
      }).render();
      if (this.collection.length === 0) {
        return this.$('button').attr('disabled', 'disabled');
      } else {
        Helpers.tabIndex($('.content a', this.el));
        return this.$('button').attr('disabled', null);
      }
    };

    DayView.prototype.clickedDeleteAll = function(ev) {
      if ($(ev.target).parent().attr('disabled') !== 'disabled') {
        ev.preventDefault();
        this.promptView = BH.Views.CreatePrompt(chrome.i18n.getMessage('confirm_delete_all_visits', [this.model.get('extendedFormalDate')]));
        this.promptView.open();
        return this.promptView.model.on('change', this.deleteAction, this);
      }
    };

    DayView.prototype.deleteAction = function(prompt) {
      if (prompt.get('action')) {
        if (this.collection) {
          this.promptView.spin();
          this.model.clear();
          return this.promptView.close();
        }
      } else {
        return this.promptView.close();
      }
    };

    DayView.prototype.filtered = function(ev) {
      return this.model.set({
        filter: $(ev.currentTarget).val()
      });
    };

    DayView.prototype.fullSearchClicked = function() {
      return this.close();
    };

    return DayView;

  })(BH.Views.Modal);

}).call(this);
